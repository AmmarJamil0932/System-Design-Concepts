# Partitioning

##  Definition
Partitioning is the process of dividing a large database table into smaller, more manageable pieces called partitions. 
Each partition contains a subset of the data but is treated as part of the same overall table.

##  Why It’s Important
As data grows, queries on large tables can become slow. Partitioning improves performance by limiting how much data the system has to scan for each query. 
It also helps in organizing and maintaining large datasets.

## How It Works
A table can be partitioned based on values in a column — for example, date, region, or user ID. 
Each partition can be stored separately on disk. 
When a query runs, the database checks which partition(s) to scan and skips the rest, reducing workload and speeding up execution.

##  Real-world Examples
Large companies like Facebook or LinkedIn use partitioning to manage huge datasets such as logs or user activity data. 
For instance, they might partition a table by month or by region to make queries faster and more scalable.

##  Trade-offs
Partitioning adds complexity to database design and query planning. 
It can also lead to uneven data distribution if not designed carefully. 
In some cases, queries might touch multiple partitions, reducing the performance benefits.

##  When to Use / When Not To
Use partitioning for very large tables, especially when queries are commonly filtered by the partition key (like date or location). 
Avoid it for small tables or when there’s no clear way to split the data evenly.

##  Further Reading
https://www.postgresql.org/docs/current/ddl-partitioning.html  
https://dev.mysql.com/doc/refman/8.0/en/partitioning-overview.html  
https://docs.microsoft.com/en-us/sql/relational-databases/partitions/partitioned-tables-and-indexes
