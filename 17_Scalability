# Scalability

##  Definition
Scalability is the ability of a system to handle increased load (like more users, requests, or data) without losing performance or breaking down. 
A scalable system can grow with demand.

##  Why It’s Important
As your app becomes popular, more users will use it. 
If your system isn’t scalable, it may slow down or crash. 
Scalability ensures your system continues to perform well as usage grows.

## How It Works
There are two main ways to scale:
- **Vertical Scaling:** Add more power (CPU, RAM) to a single server.
- **Horizontal Scaling:** Add more servers to handle more load.
Scalable systems often use load balancers, caching, sharding, and distributed architecture to spread the load.

##  Real-world Examples
Apps like Facebook, Google, and Netflix are built to scale. 
For example, when Netflix sees more users during peak hours, it adds more servers or balances traffic to keep performance high.

##  Trade-offs
Scaling can be expensive and complex. 
Vertical scaling has limits, while horizontal scaling needs careful planning (like managing distributed data and failures). 
You also need tools to monitor and adjust resources.

##  When to Use / When Not To
You should always consider scalability when building apps that may grow in usage. 
Even for small apps, designing with basic scalability in mind avoids problems later. 
For one-time or very limited-use systems, full scalability may not be necessary.

##  Further Reading
https://aws.amazon.com/scalability/  
https://en.wikipedia.org/wiki/Scalability  
https://www.digitalocean.com/community/tutorials/what-is-scalability
